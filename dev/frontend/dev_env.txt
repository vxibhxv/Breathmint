# .env.example - Copy this to .env and fill in your values
# DO NOT commit .env to version control!

# API Keys
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Model Configuration
CLAUDE_MODEL=claude-3-7-sonnet-20250219
MAX_TOKENS=1000
TEMPERATURE=0.1

# Flask Configuration
FLASK_ENV=development
FLASK_SECRET_KEY=your_secret_key_here
PORT=5000

# Frontend Configuration
REACT_APP_API_URL=http://localhost:5000/api

# Database (for future use)
DATABASE_URL=sqlite:///game.db

# Redis (for session management in production)
REDIS_URL=redis://localhost:6379

# Logging
LOG_LEVEL=INFO
LOG_FILE=game_server.log

---

# config.py - Configuration management
import os
from typing import Dict, Any
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

class Config:
    """Base configuration class"""
    
    # API Configuration
    ANTHROPIC_API_KEY = os.environ.get('ANTHROPIC_API_KEY')
    CLAUDE_MODEL = os.environ.get('CLAUDE_MODEL', 'claude-3-7-sonnet-20250219')
    MAX_TOKENS = int(os.environ.get('MAX_TOKENS', '1000'))
    TEMPERATURE = float(os.environ.get('TEMPERATURE', '0.1'))
    
    # Flask Configuration
    SECRET_KEY = os.environ.get('FLASK_SECRET_KEY', 'dev-secret-key-change-in-production')
    PORT = int(os.environ.get('PORT', '5000'))
    
    # Paths
    BASE_DIR = Path(__file__).parent
    DATA_DIR = BASE_DIR / 'data'
    IMAGES_DIR = BASE_DIR / 'images'
    FRONTEND_BUILD_DIR = BASE_DIR / 'frontend' / 'build'
    
    # Game Configuration
    DEFAULT_PLAYER = 'Tourist'
    SESSION_TIMEOUT_HOURS = 24
    MAX_CHAT_HISTORY = 100
    
    # Logging
    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
    LOG_FILE = os.environ.get('LOG_FILE', 'game_server.log')
    
    @classmethod
    def validate(cls) -> Dict[str, bool]:
        """Validate configuration and return status"""
        validations = {
            'api_key': bool(cls.ANTHROPIC_API_KEY),
            'data_dir': cls.DATA_DIR.exists(),
            'images_dir': cls.IMAGES_DIR.exists(),
        }
        
        # Create directories if they don't exist
        cls.DATA_DIR.mkdir(exist_ok=True)
        cls.IMAGES_DIR.mkdir(exist_ok=True)
        
        return validations
    
    @classmethod
    def get_safe_dict(cls) -> Dict[str, Any]:
        """Get configuration as dict without sensitive data"""
        return {
            'model': cls.CLAUDE_MODEL,
            'max_tokens': cls.MAX_TOKENS,
            'temperature': cls.TEMPERATURE,
            'port': cls.PORT,
            'data_dir': str(cls.DATA_DIR),
            'images_dir': str(cls.IMAGES_DIR),
            'session_timeout_hours': cls.SESSION_TIMEOUT_HOURS,
        }

class DevelopmentConfig(Config):
    """Development configuration"""
    DEBUG = True
    TESTING = False
    
class ProductionConfig(Config):
    """Production configuration"""
    DEBUG = False
    TESTING = False
    
    # Override with production values
    SESSION_TIMEOUT_HOURS = 48
    
    # Use Redis for session management in production
    REDIS_URL = os.environ.get('REDIS_URL')
    
    # Enhanced security
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'

class TestingConfig(Config):
    """Testing configuration"""
    DEBUG = True
    TESTING = True
    
    # Use test database
    DATA_DIR = Path(__file__).parent / 'test_data'
    
    # Disable API calls in tests
    ANTHROPIC_API_KEY = 'test-key'

# Configuration factory
def get_config(env: str = None) -> Config:
    """Get configuration based on environment"""
    if env is None:
        env = os.environ.get('FLASK_ENV', 'development')
    
    configs = {
        'development': DevelopmentConfig,
        'production': ProductionConfig,
        'testing': TestingConfig
    }
    
    config_class = configs.get(env, DevelopmentConfig)
    return config_class()

# Validate configuration on import
config = get_config()
validation = config.validate()

if not validation['api_key'] and config.FLASK_ENV != 'testing':
    print("WARNING: ANTHROPIC_API_KEY not set in environment!")

---

# requirements.txt - Python dependencies
anthropic>=0.3.0
flask>=2.3.0
flask-cors>=4.0.0
flask-socketio>=5.3.0  # Optional for WebSocket support
python-dotenv>=1.0.0
redis>=4.5.0  # For production session management
gunicorn>=20.1.0  # Production WSGI server

# Development dependencies
pytest>=7.3.0
pytest-cov>=4.1.0
black>=23.3.0
flake8>=6.0.0

---

# package.json updates for frontend
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4",
    "socket.io-client": "^4.7.0"  
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "start:dev": "REACT_APP_API_URL=http://localhost:5000/api npm start"
  },
  "proxy": "http://localhost:5000",
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}